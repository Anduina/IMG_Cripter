/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.db4o.ObjectSet;
import dao.DAO;
import entidades.Chave;
import entidades.Imagem;
import entidades.MyModel;
import imgCripter.ImgDecode;
import java.awt.FileDialog;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author mizereke
 */
public class FrmDecodifica extends javax.swing.JDialog {

    /**
     * Creates new form FrmDecodifica
     */
    public FrmDecodifica(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();   
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pnlE1 = new javax.swing.JPanel();
        btnOpen = new javax.swing.JButton();
        pnlE2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtPath = new javax.swing.JTextField();
        btnProcurar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cbFormato = new javax.swing.JComboBox();
        pnlEu = new javax.swing.JPanel();
        btnDescriptografar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableImgs = new javax.swing.JTable();
        pnlE3 = new javax.swing.JPanel();
        btnBuscar = new javax.swing.JButton();
        pb = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Descriptografar");

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));

        pnlE1.setBackground(new java.awt.Color(0, 156, 255));

        btnOpen.setText("Abrir Arquivo");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlE1Layout = new javax.swing.GroupLayout(pnlE1);
        pnlE1.setLayout(pnlE1Layout);
        pnlE1Layout.setHorizontalGroup(
            pnlE1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlE1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(btnOpen)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        pnlE1Layout.setVerticalGroup(
            pnlE1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlE1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(btnOpen)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlE2.setBackground(new java.awt.Color(0, 156, 255));

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Salvar em:");

        btnProcurar.setText("Procurar");
        btnProcurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcurarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Formato:");

        cbFormato.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ".jpeg", ".png" }));

        javax.swing.GroupLayout pnlE2Layout = new javax.swing.GroupLayout(pnlE2);
        pnlE2.setLayout(pnlE2Layout);
        pnlE2Layout.setHorizontalGroup(
            pnlE2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlE2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlE2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlE2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnProcurar))
                    .addGroup(pnlE2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(20, 20, 20)
                        .addComponent(cbFormato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlE2Layout.setVerticalGroup(
            pnlE2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlE2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlE2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProcurar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlE2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbFormato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlEu.setBackground(new java.awt.Color(0, 156, 255));

        btnDescriptografar.setText("Descriptografar");
        btnDescriptografar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDescriptografarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlEuLayout = new javax.swing.GroupLayout(pnlEu);
        pnlEu.setLayout(pnlEuLayout);
        pnlEuLayout.setHorizontalGroup(
            pnlEuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEuLayout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(btnDescriptografar)
                .addGap(34, 34, 34))
        );
        pnlEuLayout.setVerticalGroup(
            pnlEuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEuLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(btnDescriptografar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tableImgs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableImgs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableImgsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableImgs);

        pnlE3.setBackground(new java.awt.Color(0, 156, 255));

        btnBuscar.setText("Buscar Chaves");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlE3Layout = new javax.swing.GroupLayout(pnlE3);
        pnlE3.setLayout(pnlE3Layout);
        pnlE3Layout.setHorizontalGroup(
            pnlE3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlE3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(btnBuscar)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        pnlE3Layout.setVerticalGroup(
            pnlE3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlE3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(btnBuscar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pb.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        pb.setString("");
        pb.setStringPainted(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(pnlE1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlE3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(pnlE2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlEu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(pb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pnlE1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlE3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlE2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlEu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(pb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        open();
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        try {
            buscaChaves();
        } catch (IOException ex) {
            Logger.getLogger(FrmDecodifica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnProcurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcurarActionPerformed
        openPath();
        
        /*DAO dao = DAO.getDAO();
              
        ObjectSet<Chave> chaves = dao.buscar(new Chave(null));
        for(int i=0; i<chaves.size(); i++){
            dao.deletar(chaves.get(i));
            //System.out.println("Chave:  "+ chaves.get(i).getChave());
        }*/
    }//GEN-LAST:event_btnProcurarActionPerformed

    private void tableImgsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableImgsMouseClicked
        int pos = tableImgs.getSelectedRow(); 
        
        if(evt.getClickCount() == 2){
            if(fileList.get(pos).getChave().equals("Chave nao encontrada!")){
                String path = this.fileList.get(pos).getPath();
            
                FrmAddChave frmAdd = new FrmAddChave(null, true, path, pos, this);
                frmAdd.setVisible(true);
            }
        }
    }//GEN-LAST:event_tableImgsMouseClicked

    private void btnDescriptografarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDescriptografarActionPerformed
        descriptografar();
    }//GEN-LAST:event_btnDescriptografarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmDecodifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmDecodifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmDecodifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmDecodifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmDecodifica dialog = new FrmDecodifica(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    private ArrayList<Imagem> fileList;
    private MyModel model;
    private Integer pronto;
    private Integer valido;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnDescriptografar;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnProcurar;
    private javax.swing.JComboBox cbFormato;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar pb;
    private javax.swing.JPanel pnlE1;
    private javax.swing.JPanel pnlE2;
    private javax.swing.JPanel pnlE3;
    private javax.swing.JPanel pnlEu;
    private javax.swing.JTable tableImgs;
    private javax.swing.JTextField txtPath;
    // End of variables declaration//GEN-END:variables
    
    private void open(){
        reset();
        FileDialog d = new FileDialog(this ,"Abrir Arquivo", FileDialog.LOAD);
        d.setFilenameFilter(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.toLowerCase().endsWith(".imgc");
            }
        });
        d.setMultipleMode(true);
        
        d.show();
        
        if(d.getFile() != null){
            File[] files = d.getFiles();
        
            for(int i=0; i<files.length; i++){       
                this.fileList.add(new Imagem(files[i].getName(), files[i].getPath() , "Sem chave", "Pendente"));
                this.model.addRow(this.fileList.get(i));
            }
            
            
            loadTable();
            btnBuscar.setEnabled(true);
        }else{
            JOptionPane.showMessageDialog(null, "Nenhuma imagem selecionada!");
        }
    }
    
    private void openPath(){
        JFileChooser jFileChooser1 = new JFileChooser();  
        
        jFileChooser1.setApproveButtonText("Selecionar");  
        jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);  
        int returnVal = jFileChooser1.showDialog(this, null);  
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {  
            txtPath.setText(jFileChooser1.getSelectedFile().getAbsolutePath());
            btnDescriptografar.setEnabled(true);
        }
    }
    
    private void loadTable(){  
        tableImgs.setModel(this.model); 
    }
    
    private void reset(){
        
        btnBuscar.setEnabled(false);
        btnProcurar.setEnabled(false);
        cbFormato.setEnabled(false);
        btnDescriptografar.setEnabled(false);
        
        this.pronto = 0;
        this.valido = 0;
        this.fileList = new <Imagem>ArrayList();
        this.model = new MyModel();
        
        loadTable();
        pb.setValue(0);
        pb.setString("");
    }

    private void buscaChaves() throws IOException {
        DAO dao = DAO.getDAO();
        ImgDecode imgD= new ImgDecode();
              
        ObjectSet<Chave> chaves = dao.buscar(new Chave(null));
      
        for(int i=0; i<fileList.size(); i++){
            imgD.setPath(fileList.get(i).getPath());
            
            Integer c = 0;
            Boolean encontrou = false;
            while (encontrou == false && c < chaves.size()) {
                if(imgD.verificaChave(chaves.get(c).getChave())){
                    encontrou = true;
                }else{
                    c++;
                }        
            }
            
            String key;
            if(encontrou){
                key = chaves.get(c).getChave();
                
                fileList.get(i).setChave(key);
                addKey(key, i);
            }else{
                addKey("Chave nao encontrada!", i);
            }          
        }
        btnProcurar.setEnabled(true);
        cbFormato.setEnabled(true);
    }
    
    public void addKey(String key, Integer pos){
        this.model.setValueAt(key, pos, 1);
        loadTable();
    }
    
    private void descriptografar(){
        ArrayList<ImgDecode> fileDList = new <ImgDecode>ArrayList();
        ArrayList<Thread> threadList = new <Thread> ArrayList();
        
        String path;
        String pathEnd;
        
        String formato = String.valueOf(cbFormato.getSelectedIndex());
        
        for(int i = 0; i < this.fileList.size(); i++){
            if(!this.fileList.get(i).getChave().equals("Chave nao encontrada!")){
                path = this.fileList.get(i).getPath();
                pathEnd = txtPath.getText()+ "/"+ filterPathEnd(this.fileList.get(i).getNome())+formato;

                fileDList.add(new ImgDecode());
                fileDList.get(i).setPath(path);
                fileDList.get(i).setPathEnd(pathEnd);
                fileDList.get(i).setFrmD(this);
                fileDList.get(i).setPos(i);

                threadList.add(new Thread(fileDList.get(i)));
                threadList.get(i).start();
                
                this.valido++;
            } else{
                fileDList.add(null);
                threadList.add(null);
                
                alterStatus("Cancelado!", i);
            }    
        }
        pb.setString("0% do total concluido");
    }
    
    private String filterPathEnd(String pathEnd){
        return pathEnd.substring(0, pathEnd.length() -5);
    }
    
    public void alterStatus(String status, Integer pos){
        if(!status.equals("Descriptografando 100%")){
            this.model.setValueAt(status, pos, 2);
        }else{
            this.model.setValueAt("Concluido", pos, 2);
            alterBar();
            this.fileList.get(pos).setPronto(true);
        }   
    }
    
    public void alterBar(){
        this.pronto++;
        
        Integer progress = (this.pronto * 100)/this.valido;
        
        pb.setValue(progress);
        
        if(this.pronto < this.valido){
            pb.setString(Integer.toString(progress)+"% do total concluido");
        }else{
            pb.setString("Concluido com sucesso!");
            //btnOpen.setEnabled(true);
            
        }
    }
}
